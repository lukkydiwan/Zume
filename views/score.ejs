<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>AI Resume Analyzer</title>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.7.107/pdf.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/mammoth/1.4.2/mammoth.browser.min.js"></script>

  <style>
    /* Basic Reset */
    *, *::before, *::after {
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f9fafb;
      margin: 0;
      padding: 40px 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
      color: #2c3e50;
      line-height: 1.6;
    }

    .container {
      background: #fff;
      max-width: 700px;
      width: 100%;
      border-radius: 10px;
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      padding: 2.5rem 3rem;
      box-sizing: border-box;
    }

    h1 {
      margin-bottom: 1.5rem;
      font-weight: 800;
      font-size: 2rem;
      text-align: center;
      color: #1a252f;
    }

    label {
      display: block;
      margin-bottom: 0.4rem;
      font-weight: 600;
      color: #34495e;
      font-size: 0.95rem;
    }

    input[type="file"],
    input[type="text"] {
      width: 100%;
      padding: 0.75rem 1rem;
      font-size: 1rem;
      margin-bottom: 1.7rem;
      border: 1.8px solid #d1d9e6;
      border-radius: 8px;
      transition: border-color 0.3s ease;
      font-family: inherit;
    }
    input[type="file"] {
      cursor: pointer;
      padding: 0.45rem 0.5rem;
    }
    input[type="file"]:focus,
    input[type="text"]:focus {
      border-color: #3b82f6;
      outline: none;
      box-shadow: 0 0 8px #3b82f6aa;
    }

    button {
      background-color: #3b82f6;
      color: white;
      border: none;
      border-radius: 8px;
      padding: 0.85rem 2.5rem;
      font-size: 1.15rem;
      cursor: pointer;
      font-weight: 700;
      transition: background-color 0.3s ease;
      display: block;
      margin: 0 auto 2rem auto;
      user-select: none;
      box-shadow: 0 5px 15px rgba(59,130,246,0.3);
    }
    button:disabled {
      background-color: #a5b8df;
      cursor: not-allowed;
      box-shadow: none;
    }
    button:hover:not(:disabled) {
      background-color: #2563eb;
      box-shadow: 0 8px 20px rgba(37,99,235,0.5);
    }

    /* Result Section */
    #resultSection {
      display: none;
      border-top: 2px solid #e2e8f0;
      padding-top: 2rem;
    }

    #resultTitle {
      font-weight: 700;
      font-size: 1.7rem;
      margin-bottom: 0.8rem;
      text-align: center;
      color: #1f2937;
    }

    /* Stars container */
    .star-rating {
      text-align: center;
      font-size: 2.8rem;
      color: #fbbf24;
      user-select: none;
      margin-bottom: 0.3rem;
      font-family: Arial, sans-serif;
    }

    .star-rating .star {
      display: inline-block;
      position: relative;
      width: 1.2em;
      color: #ddd;
    }

    .star-rating .star.full::before {
      content: "★";
      color: #fbbf24;
      position: absolute;
      top: 0;
      left: 0;
    }

    .star-rating .star.half::before {
      content: "★";
      color: #ddd;
      position: absolute;
      top: 0;
      left: 0;
      z-index: 1;
    }
    .star-rating .star.half::after {
      content: "★";
      position: absolute;
      top: 0;
      left: 0;
      width: 50%;
      overflow: hidden;
      color: #fbbf24;
      z-index: 2;
    }

    #numericRating {
      text-align: center;
      font-weight: 600;
      color: #475569;
      font-size: 1.15rem;
      margin-bottom: 1.35rem;
    }

    #evaluationText {
      background: #f3f4f6;
      border-radius: 10px;
      padding: 1.5rem 2rem;
      font-size: 1.05rem;
      white-space: pre-wrap;
      color: #344054;
      box-shadow: inset 0 1px 3px rgb(0 0 0 / 0.1);
      max-height: 320px;
      overflow-y: auto;
    }

    /* Recommendation box */
    #recommendationSection {
      margin-top: 1.8rem;
      padding: 1.25rem 1.8rem;
      background: #dbeafe;
      border-radius: 10px;
      color: #1e40af;
      font-weight: 600;
      font-size: 1.1rem;
      box-shadow: 0 2px 8px rgba(30,64,175,0.15);
    }
    #recommendationSection h3 {
      margin-top: 0;
      margin-bottom: 0.7rem;
      font-weight: 700;
    }

    /* Responsive */
    @media (max-width: 480px) {
      .container {
        padding: 1.5rem 1.5rem;
      }
      h1 {
        font-size: 1.5rem;
      }
      button {
        width: 100%;
        font-size: 1.1rem;
      }
      #evaluationText {
        max-height: 220px;
        font-size: 1rem;
      }
    }
  </style>
</head>
<body>
  <main class="container" role="main" aria-label="AI Resume Analyzer">
    <h1>AI Resume Analyzer</h1>

    <label for="fileInput">Upload your resume (PDF or DOCX)</label>
    <input type="file" id="fileInput" accept=".pdf,.docx" aria-required="true" />

    <label for="jobRole">Target Job Role</label>
    <input type="text" id="jobRole" placeholder="Enter your target job role" aria-required="true" />

    <button id="analyzeBtn" type="button">Analyze</button>

    <section id="resultSection" aria-live="polite" aria-label="Analysis results" role="region">
      <h2 id="resultTitle">Analysis Result</h2>

      <div class="star-rating" aria-label="Overall rating stars" role="img" aria-describedby="numericRating"></div>
      <div id="numericRating"></div>

      <div id="evaluationText"></div>

      <div id="recommendationSection" style="display:none;">
        <h3>Recommendation</h3>
        <p id="recommendationText"></p>
      </div>
    </section>
  </main>

<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.7.107/pdf.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/mammoth/1.4.2/mammoth.browser.min.js"></script>

<script>
  const fileInput = document.getElementById('fileInput');
  const jobRoleInput = document.getElementById('jobRole');
  const analyzeBtn = document.getElementById('analyzeBtn');
  const resultSection = document.getElementById('resultSection');
  const starRatingDiv = resultSection.querySelector('.star-rating');
  const numericRatingDiv = document.getElementById('numericRating');
  const evaluationTextDiv = document.getElementById('evaluationText');
  const recommendationSection = document.getElementById('recommendationSection');
  const recommendationText = document.getElementById('recommendationText');

  let extractedText = '';

  // Extract text from uploaded file
  fileInput.addEventListener('change', async (event) => {
    const file = event.target.files[0];
    extractedText = '';
    if (!file) return;

    if (file.name.toLowerCase().endsWith('.pdf')) {
      const arrayBuffer = await file.arrayBuffer();
      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
      let text = '';
      for (let i = 1; i <= pdf.numPages; i++) {
        const page = await pdf.getPage(i);
        const content = await page.getTextContent();
        const strings = content.items.map(item => item.str);
        text += strings.join(' ') + '\n\n';
      }
      extractedText = text;
    } else if (file.name.toLowerCase().endsWith('.docx')) {
      const arrayBuffer = await file.arrayBuffer();
      try {
        const result = await mammoth.convertToHtml({ arrayBuffer: arrayBuffer });
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = result.value;
        extractedText = tempDiv.innerText;
      } catch (err) {
        alert('Error reading DOCX file: ' + err);
        extractedText = '';
      }
    } else {
      alert('Unsupported file format. Please upload PDF or DOCX.');
      extractedText = '';
    }
  });

  // Generate star elements (supports half star)
  function generateStars(rating) {
    const starCount = 5;
    const stars = [];

    for (let i = 1; i <= starCount; i++) {
      if (rating >= i) {
        stars.push('<span class="star full" aria-hidden="true">★</span>');
      } else if (rating + 0.5 >= i) {
        stars.push('<span class="star half" aria-hidden="true">★</span>');
      } else {
        stars.push('<span class="star" aria-hidden="true">★</span>');
      }
    }
    return stars.join('');
  }

  // Display result on the page
  function displayResult(evaluation, rating, recommendation) {
    starRatingDiv.innerHTML = generateStars(rating);
    numericRatingDiv.textContent = `${rating.toFixed(1)} / 5`;
    evaluationTextDiv.textContent = evaluation;

    if (recommendation && recommendation.trim().length > 0) {
      recommendationText.textContent = recommendation;
      recommendationSection.style.display = 'block';
    } else {
      recommendationSection.style.display = 'none';
    }

    resultSection.style.display = 'block';
    resultSection.scrollIntoView({ behavior: 'smooth' });
  }

  analyzeBtn.addEventListener('click', async () => {
    const jobRole = jobRoleInput.value.trim();

    if (!extractedText) {
      alert('Please upload a valid resume file.');
      return;
    }
    if (!jobRole) {
      alert('Please enter your target job role.');
      return;
    }

    analyzeBtn.disabled = true;
    analyzeBtn.textContent = 'Analyzing...';

    try {
      const response = await fetch('/api/analyze', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ resumeText: extractedText, jobRole }),
      });

      if (!response.ok) {
        const err = await response.json();
        alert('Error: ' + (err.error || 'Unknown error'));
        return;
      }

      const data = await response.json();

      // Expect data.evaluation (string), data.rating (number), data.recommendation (string)
      const rating = data.rating ? Math.min(Math.max(data.rating, 0), 5) : 0;
      const recommendation = data.recommendation || '';
      displayResult(data.evaluation ?? 'No evaluation available.', rating, recommendation);

    } catch (error) {
      console.error(error);
      alert('Server error occurred. Please try again later.');
    } finally {
      analyzeBtn.disabled = false;
      analyzeBtn.textContent = 'Analyze';
    }
  });
</script>
</body>
</html>